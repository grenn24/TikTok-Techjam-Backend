generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  password     String
  role         Role      @default(CREATOR)
  walletBalance Float    @default(0)
  contents     Content[]
  giftsSent     Gift[] @relation("SentGifts")
  giftsReceived Gift[] @relation("ReceivedGifts")
  averageContentQuality Float  @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  auditLogs    AuditLog[]
  suspiciousActivityReports SuspiciousActivityReport[]
}

enum Role {
  CREATOR
  CONSUMER
  ADMIN
}

model Content {
  id          String    @id @default(cuid())
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   String
  type        ContentType
  title       String
  description String?
  gifts Gift[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likes Int @default(0)
  shares Int @default(0)
  commentCount Int @default(0)
  watchTime Float @default(0)  // in seconds
  length Float @default(0) // in seconds
  views Int @default(0)
  url String?
}

enum ContentType {
  VIDEO
  LIVE
}

model Engagement {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  type      EngagementType
  createdAt DateTime @default(now())

  @@unique([userId, contentId, type])
}

enum EngagementType {
  LIKE
  COMMENT
  SHARE
}

model Gift {
  id        String   @id @default(cuid())
  consumer      User     @relation("SentGifts", fields: [consumerId], references: [id])
  consumerId    String
  creator        User     @relation("ReceivedGifts", fields: [creatorId], references: [id])
  creatorId      String
  content   Content @relation(fields: [contentId], references: [id])
  contentId String
  amount    Float
  status    GiftStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  auditLogs AuditLog[]
}

enum GiftStatus {
  PENDING
  COMPLETED
  FAILED
}

// immutable ledgers of gift transactions
model AuditLog {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  action      AuditLogAction
  amount      Float?   // only for gift transfers
  giftId      String?
  gift        Gift?     @relation(fields: [giftId], references: [id])
  description String?
  prevHash    String?  // hash of the previous record
  hash        String   // current entry hash (prevHash + row data)
  createdAt   DateTime @default(now())
  suspiciousActivityReports SuspiciousActivityReport[]
}

enum AuditLogAction {
  SUSPICIOUS_GIFTING
  SEND_GIFT
  POTENTIAL_GAMING
}

model SuspiciousActivityReport {
  id           String   @id @default(cuid())
  reporterId   String
  reporter     User     @relation(fields: [reporterId], references: [id])
  auditLogId   String
  auditLog     AuditLog @relation(fields: [auditLogId], references: [id])
  reason       String
  description  String?
  createdAt    DateTime @default(now())
}