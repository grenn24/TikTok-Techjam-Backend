generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  name         String
  email        String    @unique
  password     String
  role         Role      @default(CREATOR)
  walletBalance Float    @default(0)
  contents     Content[]
  giftsSent     Gift[] @relation("SentGifts")
  giftsReceived Gift[] @relation("ReceivedGifts")
  rewards      Reward[]
  fraudLogs    FraudLog[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  CREATOR
  CONSUMER
  ADMIN
}

model Content {
  id          String    @id @default(cuid())
  creator     User      @relation(fields: [creatorId], references: [id])
  creatorId   String
  type        ContentType
  title       String
  description String?
  qualityScore Float     @default(0)
  gifts Gift[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ContentType {
  VIDEO
  LIVE
}

model Gift {
  id        String   @id @default(cuid())
  from      User     @relation("SentGifts", fields: [fromId], references: [id])
  fromId    String
  to        User     @relation("ReceivedGifts", fields: [toId], references: [id])
  toId      String
  content   Content? @relation(fields: [contentId], references: [id])
  contentId String?
  amount    Float
  status    GiftStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum GiftStatus {
  PENDING
  COMPLETED
  FAILED
}

model Reward {
  id        String   @id @default(cuid())
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
  points    Float
  reason    String
  createdAt DateTime @default(now())
}

model FraudLog {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      FraudType
  description String
  createdAt DateTime @default(now())
}

enum FraudType {
  FRAUD
  AML
}